<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<EventMap xmlns="http://mate.asfusion.com/"
	xmlns:mx="http://www.adobe.com/2006/mxml">
	<mx:Script>
		<![CDATA[
      import com.asfusion.mate.events.Dispatcher;     
      import mx.events.FlexEvent;     
      import org.bigbluebutton.common.events.OpenWindowEvent;
      import org.bigbluebutton.core.EventConstants;
      import org.bigbluebutton.main.events.ModuleStartedEvent;
      import org.bigbluebutton.modules.activitylog.events.ActivitylogEvent;
      import org.bigbluebutton.modules.activitylog.events.ConnectionEvent;
      import org.bigbluebutton.modules.activitylog.events.SendPrivateActivitylogMessageEvent;
      import org.bigbluebutton.modules.activitylog.events.SendPublicActivitylogMessageEvent;
      import org.bigbluebutton.modules.activitylog.events.StartActivitylogModuleEvent;
      import org.bigbluebutton.modules.activitylog.events.StopActivitylogModuleEvent;
      import org.bigbluebutton.modules.activitylog.events.TranscriptEvent;
      import org.bigbluebutton.modules.activitylog.services.ActivitylogMessageService;
      import org.bigbluebutton.modules.activitylog.services.MessageReceiver;
      import org.bigbluebutton.modules.activitylog.services.MessageSender;
      import org.bigbluebutton.modules.activitylog.views.ActivitylogView;
      import org.bigbluebutton.modules.activitylog.views.ActivitylogWindow;
		]]>
	</mx:Script>
	
	<EventHandlers type="{FlexEvent.PREINITIALIZE}">
		<ObjectBuilder generator="{ActivitylogEventMapDelegate}" constructorArguments="{scope.dispatcher}"/>
	</EventHandlers>
	
	<EventHandlers type="{StartActivitylogModuleEvent.START_ACTIVITYLOG_MODULE_EVENT}">        
		<MethodInvoker generator="{ActivitylogEventMapDelegate}" method="setTranslationOptions" arguments="{event}" />
    <ObjectBuilder generator="{ActivitylogMessageService}"/>
  </EventHandlers>
    
  <EventHandlers type="{StopActivitylogModuleEvent.STOP_ACTIVITYLOG_MODULE_EVENT}">        
   		<MethodInvoker generator="{ActivitylogEventMapDelegate}" method="closeActivitylogWindow" />
  </EventHandlers>
        
  <EventHandlers type="{ConnectionEvent.CONNECT_EVENT}">        
 		<MethodInvoker generator="{ActivitylogEventMapDelegate}" method="openActivitylogWindow"/>	
  </EventHandlers>

  <EventHandlers type="{EventConstants.SEND_PUBLIC_ACTIVITYLOG_REQ}">        
    <MethodInvoker generator="{ActivitylogMessageService}" method="sendPublicMessageFromApi" arguments="{event.message}"/>		
  </EventHandlers>
  
    <EventHandlers type="{SendPublicActivitylogMessageEvent.SEND_PUBLIC_ACTIVITYLOG_MESSAGE_EVENT}">        
 		<MethodInvoker generator="{ActivitylogMessageService}" method="sendPublicMessage" arguments="{event.activitylogMessage}"/>		
    </EventHandlers>
  
  <Injectors target="{ActivitylogMessageService}">
    <PropertyInjector targetKey="dispatcher" source="{scope.dispatcher}"/>
    <PropertyInjector targetKey="receiver" source="{MessageReceiver}"/>
    <PropertyInjector targetKey="sender" source="{MessageSender}"/>
  </Injectors>

  <Injectors target="{MessageReceiver}">
    <PropertyInjector targetKey="dispatcher" source="{scope.dispatcher}"/>
  </Injectors>
 
  <Injectors target="{MessageSender}">
    <PropertyInjector targetKey="dispatcher" source="{scope.dispatcher}"/>
  </Injectors>
  
</EventMap>
